{-
Euclid's formula[1] is a fundamental formula for generating Pythagorean triples given an arbitrary pair of positive integers m and n with m > n. The formula states that the integers

a=m^{2}-n^{2},\ \,b=2mn,\ \,c=m^{2}+n^{2}

form a Pythagorean triple. The triple generated by Euclid's formula is primitive if and only if m and n are coprime and m âˆ’ n is odd. If both m and n are odd, then a, b, and c will be even, and so the triple will not be primitive; however, dividing a, b, and c by 2 will yield a primitive triple if m and n are coprime.[2]
-}

import Euler
import qualified Data.List as List
import qualified Data.Ord as Ord
import qualified Data.MemoCombinators as Memo

ub :: Integer
ub = 1500000

euclid_pairs :: [(Integer, Integer)]
euclid_pairs = [(n, m) | m<-[2..ub_m], n<-[1..m], (gcd n m) == 1, odd (m - n)]
	where
		ub_m = (toInteger . round . sqrt . fromInteger) $ ub `div` 2
		ns m = case even m of
			True -> 1 : (map (\n -> 2*n + 1) [1..((m `div` 2)-1)])
			False -> map (*2) [1..((m-1) `div` 2)]

form_triples :: (Integer, Integer) -> [(Integer, Integer, Integer)]
form_triples (n, m) = [(k*a, k*b, k*c) | k <- [1..]]
	where
		a = m^2 - n^2
		b = 2 * m * n
		c = m^2 + n^2

triples :: [[(Integer, Integer, Integer)]]
triples = map form_triples euclid_pairs

perimeters_sorted :: [Integer]
perimeters_sorted = List.sort perimeters
	where
		perimeters = map
			(\(a,b,c) -> a+b+c)
			$ concat $ map
				(takeWhile (\(a,b,c) -> a+b+c < ub))
				triples

unique_perimeters :: [Integer]
unique_perimeters = concat $ filter unique $ List.group perimeters_sorted
	where unique l = (length l) == 1

main = do
	(putStrLn . show) $ length unique_perimeters
{-
	Diophantine equation:

		x		x-1			1
		-	*	---		=	-
		n		n-1			2

	solutions generated by `next`
-}

import qualified Data.List as List

import Data.Maybe

next :: (Integer, Integer) -> (Integer, Integer)
next (x, n) = (x', n')
	where
		x' = 3*x + 2*n - 2
		n' = 4*x + 3*n - 3

solutions :: [(Integer, Integer)]
solutions = iterate next (15, 21)

sought :: Integer
sought
	= fromJust
	. List.find
	. (> (10^12) . snd)
	$ solutions

main :: IO ()
main = do
	putStrLn . show $ sought
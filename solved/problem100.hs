{-
	Diophantine equation:

		x		x-1			1
		-	*	---		=	-
		n		n-1			2

	solutions generated by `next`
-}

import Euler

next :: (Integer, Integer) -> (Integer, Integer)
next (x, n) = (x', n')
	where
		x' = 3*x + 2*n - 2
		n' = 4*x + 3*n - 3

solutions :: [(Integer, Integer)]
solutions = iterate next (15, 21)

main = do
	(putStrLn . show) $ find_guaranteed big_enough solutions
		where big_enough (a, b) = b > (10^12)